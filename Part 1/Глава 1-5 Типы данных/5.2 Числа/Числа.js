//Задача №1  Сумма пользовательских чисел
// Создайте скрипт, который запрашивает ввод двух чисел (используйте prompt) и после показывает их сумму.
//Мой ответ
// let a = +prompt('Введите 1 число');
// let b = +prompt('Введите 2 число');
// let c = a + b;

// alert(`Сумма чисел равна ${c}`);







//Задача №2 Почему 6.35.toFixed(1) == 6.3?
// Методы Math.round и toFixed, согласно документации, округляют до ближайшего целого числа: 0..4 округляется в меньшую сторону, тогда как 5..9 в большую сторону.

// Например:

// alert( 1.35.toFixed(1) ); // 1.4
// // Но почему в примере ниже 6.35 округляется до 6.3?

// alert( 6.35.toFixed(1) ); // 6.3
// Как правильно округлить 6.35?

//Мой ответ 
// 1)  Почему в примере выше 6.35 округляется до 6.3?
// Не знаю

// 2) Как правильно округлить 6.35?
// Не знаю


//Правильный ответ

// Во внутреннем двоичном представлении 6.35 является бесконечной двоичной дробью. Хранится она с потерей точности…

// Давайте посмотрим:

// alert( 6.35.toFixed(20) ); // 6.34999999999999964473
// Потеря точности может как увеличивать, так и уменьшать число. В данном случае число становится чуть меньше, поэтому оно округляется в меньшую сторону.

// А для числа 1.35?

// alert( 1.35.toFixed(20) ); // 1.35000000000000008882
// Тут потеря точности приводит к увеличению числа, поэтому округление произойдёт в большую сторону.

// Каким образом можно исправить ошибку в округлении числа 6.35?

// Мы должны приблизить его к целому числу, перед округлением:

// alert( (6.35 * 10).toFixed(20) ); // 63.50000000000000000000
// Обратите внимание, что для числа 63.5 не происходит потери точности. Дело в том, что десятичная часть 0.5 на самом деле 1/2. Дробные числа, делённые на степень 2, точно представлены в двоичной системе, теперь мы можем округлить число:

// alert( Math.round(6.35 * 10) / 10); // 6.35 -> 63.5 -> 64(rounded) -> 6.4
 






//Задача №3 Ввод числового значения
// Создайте функцию readNumber, которая будет запрашивать ввод числового значения до тех пор, пока посетитель его не введёт.

// Функция должна возвращать числовое значение.

// Также надо разрешить пользователю остановить процесс ввода, отправив пустую строку или нажав «Отмена». В этом случае функция должна вернуть null.
 
//Мой ответ  +
// function readNumber() {
//     let n;
//     while (isFinite(n) === false) {
//         n = +prompt('Введите число');
        
//     }  
//     if (n == '') {
//         alert('Число: null')
//     } else {
//         alert('Число: ' + n )
//     }
// }

// readNumber()

//Правильный ответ  
// function readNumber() {
//     let num;
  
//     do {
//       num = prompt("Введите число", 0);
//     } while ( !isFinite(num) );
  
//     if (num === null || num === '') return null;
  
//     return +num;
//   }
  
//   alert(`Число: ${readNumber()}`);







//Задача №4 Бесконечный цикл по ошибке
// Этот цикл – бесконечный. Он никогда не завершится, почему?

// let i = 0;
// while (i != 10) {
//   i += 0.2;
// }

//Мой ответ +
// значние i никогда не будет равняться 10, а будет очень близко к 10 но меньше. Так как i из дробного никогда не станет целым числом


//Правильный ответ 
// Потому что i никогда не станет равным 10.

// Запустите скрипт и вы увидите реальные значения i:

// let i = 0;
// while (i < 11) {
//   i += 0.2;
//   if (i > 9.8 && i < 10.2) alert( i );
// }
// Ни одно из этих чисел не равно 10.

// Это происходит из-за потери точности, при прибавлении таких дробей как 0.2.

// Вывод: избегайте проверок на равенство при работе с десятичными дробями.




//Задача №5 Случайное число от min до max
// Встроенный метод Math.random() возвращает случайное число от 0 (включительно) до 1 (но не включая 1)

// Напишите функцию random(min, max), которая генерирует случайное число с плавающей точкой от min до max (но не включая max).

// Пример работы функции:

// alert( random(1, 5) ); // 1.2345623452
// alert( random(1, 5) ); // 3.7894332423
// alert( random(1, 5) ); // 4.3435234525

//Мой ответ +
// function random(min, max) {
//     alert(Math.random() * (max - min) + min)

// }
// random(1, 5)







//Задача №6  Случайное целое число от min до max
// Напишите функцию randomInteger(min, max), которая генерирует случайное целое (integer) число от min до max (включительно).

// Любое число из интервала min..max должно появляться с одинаковой вероятностью.

// Пример работы функции:

// alert( randomInteger(1, 5) ); // 1
// alert( randomInteger(1, 5) ); // 3
// alert( randomInteger(1, 5) ); // 5


//Мой ответ
// function randomInteger(min, max) {
//     alert(Math.trunc(Math.random() * (max - min) + min + Math.random()))
// }

// randomInteger(1, 5)


//Правильный ответ 
// Есть много правильных решений этой задачи. Одно из них – правильно указать границы интервала. Чтобы выровнять интервалы, мы можем генерировать числа от 0.5 до 3.5, это позволит добавить необходимые вероятности к min и max:

// function randomInteger(min, max) {
//   // получить случайное число от (min-0.5) до (max+0.5)
//   let rand = min - 0.5 + Math.random() * (max - min + 1);
//   return Math.round(rand);
// }

// alert( randomInteger(1, 3) );
// Другое правильное решение – это использовать Math.floor для получения случайного числа от min до max+1:

// function randomInteger(min, max) {
//   // случайное число от min до (max+1)
//   let rand = min + Math.random() * (max + 1 - min);
//   return Math.floor(rand);
// }

// alert( randomInteger(1, 3) );
// Теперь все интервалы отображаются следующим образом:

// число от 1  ... до 1.9999999999  округлится до 1
// число от 2  ... до 2.9999999999  округлится до 2
// число от 3  ... до 3.9999999999  округлится до 3
// Все интервалы имеют одинаковую длину, что выравнивает вероятность получения случайных чисел.



