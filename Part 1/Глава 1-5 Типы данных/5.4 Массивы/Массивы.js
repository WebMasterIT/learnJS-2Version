//Задача №1 Скопирован ли массив?
// Что выведет следующий код?

// let fruits = ["Яблоки", "Груша", "Апельсин"];

// // добавляем новое значение в "копию"
// let shoppingCart = fruits;
// shoppingCart.push("Банан");

// // что в fruits?
// alert( fruits.length ); // ?

// Мой ответ 
// "Яблоки", "Груша", "Апельсин", "Банан"


//Правильный ответ
// let fruits = ["Яблоки", "Груша", "Апельсин"];

// let shoppingCart = fruits;

// shoppingCart.push("Банан");

// alert( fruits.length ); // 4





//Задача №2 Операции с массивами
// Давайте произведём 5 операций с массивом.

// Создайте массив styles с элементами «Джаз» и «Блюз».
// Добавьте «Рок-н-ролл» в конец.
// Замените значение в середине на «Классика». Ваш код для поиска значения в середине должен работать для массивов с любой длиной.
// Удалите первый элемент массива и покажите его.
// Вставьте «Рэп» и «Регги» в начало массива.
// Массив по ходу выполнения операций:

// Джаз, Блюз
// Джаз, Блюз, Рок-н-ролл
// Джаз, Классика, Рок-н-ролл
// Классика, Рок-н-ролл
// Рэп, Регги, Классика, Рок-н-ролл


// // Мой ответ -  (не продумал код для поиска значения в середине для любой длины)
// let styles = ['Джаз', 'Блюз'];
// console.log("styles", styles)
// styles.push = 'Рок-н-ролл';
// console.log("styles", styles)
// styles[styles.length/2] = 'Классика';
// console.log("styles", styles)
// styles.shift();
// console.log("styles", styles)
// styles.unshift('Рэп', 'Рэгги');
// console.log("styles", styles)

//Правильный ответ
// let styles = ['Джаз', 'Блюз'];
// styles.push("Рок-н-ролл");
// styles[Math.floor((styles.length - 1) / 2)] = "Классика";
// console.log("styles", styles)
// alert( styles.shift() );
// styles.unshift("Рэп", "Регги");








//Задача №3 Вызов в контексте массива
// Каков результат? Почему?

// let arr = ["a", "b"];

// arr.push(function() {
//   alert( this );
// })

// arr[2](); // ?

//Мой ответ 
// Результат: a и b, т.к. в this будет передан весь массив


//Правильный ответ
// Вызов arr[2]() синтаксически – старый добрый obj[method](), в роли obj – arr, а в роли method – 2.

// Итак, у нас есть вызов функции arr[2] как метода объекта. Соответственно, он получает в качестве this объект arr и выводит массив:

// let arr = ["a", "b"];

// arr.push(function() {
//   alert( this );
// })

// arr[2](); // "a","b",function





// Задача №4 Сумма введённых чисел
// Напишите функцию sumInput(), которая:

// Просит пользователя ввести значения, используя prompt и сохраняет их в массив.
// Заканчивает запрашивать значения, когда пользователь введёт не числовое значение, пустую строку или нажмёт «Отмена».
// Подсчитывает и возвращает сумму элементов массива.
// P.S. Ноль 0 – считается числом, не останавливайте ввод значений при вводе «0».


//Мой ответ
// function sumInput() {
//     let sum;
//     let arr = [ ];
   
//     do {
//             arr = prompt("Введите число", 0);
//             sum += arr;
//     } while ( isFinite(arr) )
            
//     if (arr === null || arr === '') return null;
//     return +sum;
//     console.log(+sumInput)
// }

//   alert(`Число: ${sumInput()}`)



//Правильный ответ 
//   function sumInput() {

//   let numbers = [];

//   while (true) {

//     let value = prompt("Введите число", 0);

//     // Прекращаем ввод?
//     if (value === "" || value === null || !isFinite(value)) break;

//     numbers.push(+value);
//   }

//   let sum = 0;
//   for (let number of numbers) {
//     sum += number;
//   }
//   return sum;
// }

// alert( sumInput() );

 

// Задача №5 Подмассив наибольшей суммы

// На входе массив чисел, например: arr = [1, -2, 3, 4, -9, 6].

// Задача: найти непрерывный подмассив в arr, сумма элементов в котором максимальна.

// Функция getMaxSubSum(arr) должна возвращать эту сумму.

// Например:

// getMaxSubSum([-1, 2, 3, -9]) = 5 (сумма выделенных)
// getMaxSubSum([2, -1, 2, 3, -9]) = 6
// getMaxSubSum([-1, 2, 3, -9, 11]) = 11
// getMaxSubSum([-2, -1, 1, 2]) = 3
// getMaxSubSum([100, -9, 2, -3, 5]) = 100
// getMaxSubSum([1, 2, 3]) = 6 (берём все)
// Если все элементы отрицательные – ничего не берём(подмассив пустой) и сумма равна «0»:

// getMaxSubSum([-1, -2, -3]) = 0
// Попробуйте придумать быстрое решение: O(n2), а лучше за О(n) операций.

//Мой ответ - не знаю как дать программе понять что нужно собрать в подмассив непрерывный массив, с макс суммой элементов
// т.е как правильно задать вычисление макс суммы элементов


